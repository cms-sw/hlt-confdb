<?xml version="1.0"?>
<project name="ConfDB" default="all" basedir=".">

  <description>Build ConfDB project.</description>

  <!--load additional ant tasks-->
  <taskdef resource="net/sf/antcontrib/antlib.xml">
    <classpath>
      <pathelement location="antlib/ant-contrib-1.0b3.jar"/>
    </classpath>
  </taskdef>

  <property environment="env"/>
  <property name="build.compiler" value="modern"/>
  <property name="dir.src"    location="src"/>
  <property name="dir.ext"    location="ext"/>
  <property name="dir.signed" location="ext/signed"/>
  <property name="dir.build"  location="classes"/>
  <property name="dir.icons"  location="icons"/>
  <property name="dir.lib"    location="lib"/>
  <property name="dir.python" location="python"/>
  <!-- see hlt-confdb.properties for a sample properties file -->
  <property file="${user.home}/.hlt-confdb.properties"/>

  <!-- initialize variables, make directories, check what needs to be rebuilt -->
  <target name="init">
    <mkdir dir="${dir.build}"/>
    <mkdir dir="${dir.build}/JNLP-INF"/>
    <mkdir dir="${dir.lib}"/>
    <mkdir dir="${dir.signed}"/>
    <uptodate property="python.uptodate" targetfile="${dir.lib}/cmssw-python.jar">
      <srcfiles dir="${dir.python}" includes="**/*.py"/>
    </uptodate>
    <resourcecount property="python.files">
      <fileset dir="${dir.python}" includes="**/*.py"/>
    </resourcecount>
    <uptodate property="gui.uptodate" targetfile="${dir.lib}/cmssw-evf-confdb-gui.jar">
      <srcfiles dir="${dir.src}"/>
      <srcfiles dir="${dir.icons}"/>
    </uptodate>
    <available file="${sign.store}" property="sign.available"/>
  </target>

  <!-- compile all *.py files under python/ to *$py.class files -->
  <target name="python" depends="init" unless="python.uptodate">
    <echo message="Python: compile ${python.files} python files to python bytecode"/>
    <exec executable="python2.7">
      <arg value="-m"/>
      <arg value="compileall"/>
      <arg value="-q"/>
      <arg value="${dir.python}"/>
    </exec>
    <echo message="Jython: compile ${python.files} python files to java bytecode"/>
    <java jar="${dir.ext}/jython.jar" fork="true">
      <arg value="-m"/>
      <arg value="compileall"/>
      <arg value="-q"/>
      <arg value="${dir.python}"/>
    </java>
    <jar jarfile="${dir.lib}/cmssw-python.jar">
      <fileset dir="${dir.python}"/>
      <manifest>
        <attribute name="Application-Name"                          value="CMSSW python library"/>
        <attribute name="Vendor"                                    value="CMS ConfDB"/>
        <attribute name="Codebase"                                  value="*"/>
        <attribute name="Application-Library-Allowable-Codebase"    value="*"/>
        <attribute name="Permissions"                               value="all-permissions"/>
        <attribute name="Trusted-Only"                              value="true"/>
      </manifest>
    </jar>
    <if>
      <istrue value="${sign.available}"/>
      <then>
        <signjar keystore="${sign.store}" storepass="${sign.pass}" alias="${sign.alias}" lazy="true" preservelastmodified="false" tsaurl="${sign.tsa}">
          <fileset file="${dir.lib}/cmssw-python.jar"/>
        </signjar>
      </then>
      <else>
        <echo message=""/>
        <echo message="Warning:"/>
        <echo message="The keystore is not available, the .jar files will not be signed."/>
      </else>
    </if>
  </target>

  <!-- compile all *.java files in src/** to *.class files in classes/** -->
  <target name="compile" depends="init">
    <javac srcdir="${dir.src}" destdir="${dir.build}" debug="true" target="1.8" source="1.8" bootclasspath="/usr/lib/jvm/jre-1.8.0/lib/rt.jar" includeantruntime="false">
      <compilerarg line="-Xmaxerrs 0"/>
      <compilerarg line="-Xmaxwarns 0"/>
      <classpath>
        <fileset dir="${dir.ext}" includes="*.jar"/>
      </classpath>
    </javac>
  </target>

  <!-- combine all classes into jar file -->
  <target name="gui" depends="compile" unless="gui.uptodate">
    <jar jarfile="${dir.lib}/cmssw-evf-confdb-gui.jar">
      <fileset dir="${dir.build}"/>
      <fileset dir="${dir.icons}"/>
      <fileset dir="${dir.src}">
        <include name="conf/*"/>
      </fileset>
      <manifest>
        <attribute name="Application-Name"                          value="CMS ConfDB GUI" />
        <attribute name="Vendor"                                    value="CMS ConfDB"/>
        <attribute name="Main-Class"                                value="confdb.gui.ConfDbGUI"/>
        <attribute name="Codebase"                                  value="*"/>
        <attribute name="Application-Library-Allowable-Codebase"    value="*"/>
        <attribute name="Permissions"                               value="all-permissions"/>
        <attribute name="Trusted-Only"                              value="true"/>
      </manifest>
    </jar>
    <if>
      <istrue value="${sign.available}"/>
      <then>
        <signjar keystore="${sign.store}" storepass="${sign.pass}" alias="${sign.alias}" lazy="true" preservelastmodified="false" tsaurl="${sign.tsa}">
          <fileset file="${dir.lib}/cmssw-evf-confdb-gui.jar"/>
        </signjar>
      </then>
      <else>
        <echo message=""/>
        <echo message="Warning:"/>
        <echo message="The keystore is not available, the .jar files will not be signed."/>
      </else>
    </if>
  </target>

  <!-- combine converter-relevant classes into jar file -->
  <target name="converter" depends="compile" unless="gui.uptodate">
    <jar jarfile="${dir.lib}/cmssw-evf-confdb-converter.jar">
      <fileset dir="${dir.build}">
        <exclude name="confdb/gui/**"/>
        <exclude name="confdb/parser/**"/>
      </fileset>
      <fileset dir="${dir.src}">
        <include name="conf/*"/>
      </fileset>
      <manifest>
        <attribute name="Main-Class" value="confdb.converter.Converter" />
      </manifest>
    </jar>
    <if>
      <istrue value="${sign.available}"/>
      <then>
        <signjar keystore="${sign.store}" storepass="${sign.pass}" alias="${sign.alias}" lazy="true" preservelastmodified="false" tsaurl="${sign.tsa}">
          <fileset file="${dir.lib}/cmssw-evf-confdb-converter.jar"/>
        </signjar>
      </then>
      <else>
        <echo message=""/>
        <echo message="Warning:"/>
        <echo message="The keystore is not available, the .jar files will not be signed."/>
      </else>
    </if>
  </target>

  <!-- combine parser-relevant classes into jar file -->
  <target name="parser" depends="compile" unless="gui.uptodate">
    <jar jarfile="${dir.lib}/cmssw-evf-confdb-parser.jar">
      <fileset dir="${dir.build}">
        <exclude name="confdb/gui/**"/>
      </fileset>
      <fileset dir="${dir.src}">
        <include name="conf/*"/>
      </fileset>
      <manifest>
        <attribute name="Main-Class" value="confdb.parser.PythonParser" />
      </manifest>
    </jar>
    <if>
      <istrue value="${sign.available}"/>
      <then>
        <signjar keystore="${sign.store}" storepass="${sign.pass}" alias="${sign.alias}" lazy="true" preservelastmodified="false" tsaurl="${sign.tsa}">
          <fileset file="${dir.lib}/cmssw-evf-confdb-parser.jar"/>
        </signjar>
      </then>
      <else>
        <echo message=""/>
        <echo message="Warning:"/>
        <echo message="The keystore is not available, the .jar files will not be signed."/>
      </else>
    </if>
  </target>

  <!-- sign all external jar files -->
  <target name="signext" depends="init">
    <if>
      <istrue value="${sign.available}"/>
      <then>
        <signjar keystore="${sign.store}" storepass="${sign.pass}" alias="${sign.alias}" lazy="true" preservelastmodified="false" tsaurl="${sign.tsa}" destdir="${dir.signed}">
          <fileset dir="${dir.ext}" includes="*.jar"/>
        </signjar>
      </then>
      <else>
        <echo message=""/>
        <echo message="Warning:"/>
        <echo message="The keystore is not available, the .jar files will not be signed."/>
      </else>
    </if>
  </target>

  <!-- build all targets -->
  <target name="all" depends="compile,python,gui,parser,converter,signext"/>

  <!-- run the ConfDB GUI -->
  <target name="run" depends="gui,python,signext" description="Start the ConfDB GUI.">
    <java classname="confdb.gui.ConfDbGUI" fork="true">
      <classpath>
        <pathelement location="${dir.lib}/cmssw-evf-confdb-gui.jar"/>
        <pathelement location="${dir.lib}/cmssw-python.jar"/>
        <pathelement location="${dir.signed}/ojdbc8.jar"/>
        <pathelement location="${dir.signed}/jython.jar"/>
      </classpath>
    </java>
  </target>

  <!-- delete all class files -->
  <target name="clean">
    <delete includeemptydirs="true" quiet="true">
      <fileset dir="${dir.build}"/>
      <fileset dir="${dir.lib}"/>
      <fileset dir="${dir.signed}"/>
      <fileset dir="${dir.python}" includes="**/*.pyc"/>
      <fileset dir="${dir.python}" includes="**/*.class"/>
    </delete>
    <echo message="clean successful"/>
  </target>
</project>
